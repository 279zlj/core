apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {

    buildToolsVersion '29.0.0'
    compileSdkVersion 29

    defaultConfig {

        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName '1.0'

        buildConfigField "String", "LIB_X2T", "\"$NAME_LIB_X2T\""

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_TOOLCHAIN=clang",
                          "-DANDROID_STL=c++_static",
                          "-DANDROID_ARM_NEON=TRUE",
                          "-DARG_PATH_LIB_SRC_3D_PARTY=${getProjectPath(PATH_LIB_SRC_3D_PARTY)}",
                          "-DARG_PATH_LIB_DST_X2T=${getProjectPath(PATH_LIB_DST_X2T, true)}",
                          "-DARG_PATH_SRC_CORE=${getProjectPath(PATH_SRC_CORE)}",
                          "-DARG_NAME_LIB_X2T=$NAME_LIB_X2T"
            }
        }

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
            jniDebuggable true
        }
    }

    sourceSets {
        main {
            java.srcDirs = [
                "src/main/java"
            ]

            jni.srcDirs = [
                "src/main/cpp"
            ]
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.50"
}



/*
* Check the path for existence,
* otherwise get the path relative to the current project,
* otherwise the error is in the path
* */
def getProjectPath(String path, Boolean isRelativeCreate = false) {
    def slashPath = path.replaceAll("\\\\", "/")
    def absolutePath = file(slashPath)
    def relativePath = file("${project(':libx2t').projectDir}/$slashPath")
//    def relativePath = file("$rootProject.projectDir/$slashPath") // For current project

    if (absolutePath.exists() && absolutePath.isDirectory()) {
        return absolutePath.toString()
    } else if ((relativePath.exists() && relativePath.isDirectory()) || (isRelativeCreate && relativePath.mkdirs())) {
        return relativePath.toString()
    }

    new IllegalArgumentException("getProjectPath($path) - path doesn't exist...")
}