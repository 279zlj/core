<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:r="http://schemas.openxmlformats.org/package/2006/relationships"
                xmlns:mainr="http://schemas.openxmlformats.org/officeDocument/2006/relationships"
                xmlns:main="http://schemas.openxmlformats.org/spreadsheetml/2006/main"
                xmlns:msxsl="urn:schemas-microsoft-com:xslt"
                xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"
                extension-element-prefixes="msxsl">

  <xsl:variable name="default_column_width" select="round(9.143 * $MaximumDigitWidth)"/>
  <xsl:template match="main:worksheet">
    <xsl:variable name="ws_pos" select="position()"/>
    <file name="{$worksheets_info/sheet[position() = $ws_pos]/@file_name}">
      <html xmlns="http://www.w3.org/TR/REC-html40">

        <head>
          <meta http-equiv="Content-Type" content="text/html; charset={$charset}"/>
          <link rel="Stylesheet" href="stylesheet.css"/>
          <xsl:call-template name="generate_java_script"/>
<!--           <script language="javascript" src="ws_scripts.js" type="text/javascript"></script> -->
        </head>
        <body link="blue" vlink="purple" onload="OnLoad();">
          <xsl:call-template name="sheet_body_content"/>
        </body>
      </html>
    </file>
  </xsl:template>

  <xsl:template name="sheet_body_content">
    <!-- Current node must be main:worksheet -->
    <xsl:variable name="columns_number">
      <xsl:call-template name="get_columns_number"/>
    </xsl:variable>
    <xsl:variable name="table_width">
      <xsl:call-template name="sum_columns_widths">
        <xsl:with-param name="columns_number" select="$columns_number"/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="defaultRowHeight_stored" select="main:sheetFormatPr/@defaultRowHeight"/>
    <xsl:variable name="default_row_height">
      <xsl:choose>
      	<xsl:when test="$defaultRowHeight_stored"><xsl:value-of select="$defaultRowHeight_stored"/></xsl:when>
      	<xsl:otherwise>15</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="max_row_number" select="main:sheetData/main:row[position() = last()]/@r"/>
    <xsl:variable name="merge_map_raw">
      <xsl:call-template name="generate_merge_map">
      	<xsl:with-param name="mergeCells" select="main:mergeCells"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="merge_map" select="msxsl:node-set($merge_map_raw)"/>
    <table border="0" cellpadding="0" cellspacing="0" width="{$table_width}" style="border-collapse:collapse;table-layout:fixed">
      <xsl:call-template name="generate_cols">
      	<xsl:with-param name="columns_number" select="$columns_number"/>
      </xsl:call-template>

      <xsl:call-template name="generate_rows">
        <xsl:with-param name="default_row_height" select="$default_row_height"/>
        <xsl:with-param name="merge_map" select="$merge_map"/>
        <xsl:with-param name="rows_number" select="$max_row_number"/>
        <xsl:with-param name="columns_number" select="$columns_number"/>
      </xsl:call-template>
      
    </table>
  </xsl:template>
                

  <xsl:template name="generate_rows">
    <!-- Req: current node is <worksheet> -->
    <xsl:param name="default_row_height"/>
    <xsl:param name="merge_map"/>

    <xsl:param name="rows_number"/>
    <xsl:param name="columns_number"/>
    <xsl:param name="start_pos">1</xsl:param>

    <xsl:if test="$start_pos &lt;= $rows_number">
      
      <xsl:variable name="row" select="main:sheetData/main:row[@r = $start_pos]"/>
      <xsl:choose>
        <xsl:when test="$row">
            <tr xmlns="http://www.w3.org/TR/REC-html40">
              <xsl:attribute name="style">
                <xsl:text>height:</xsl:text>
                <xsl:choose>
                  <xsl:when test="$row/@ht">
                    <xsl:value-of select="$row/@ht"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$default_row_height"/>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:text>pt</xsl:text>
              </xsl:attribute>
              <xsl:for-each select="$row">
                <xsl:call-template name="generate_cells">
              	  <xsl:with-param name="columns_number" select="$columns_number"/>
              	  <xsl:with-param name="merge_map" select="$merge_map"/>
                </xsl:call-template>
              </xsl:for-each>
            </tr>
        </xsl:when>
        <xsl:otherwise>
          <!-- Empty row with empty cells -->
          <tr height="{$default_row_height}" xmlns="http://www.w3.org/TR/REC-html40">
            <xsl:call-template name="generate_empty_cells">
              <xsl:with-param name="col_start" select="1"/>
              <xsl:with-param name="col_end" select="$columns_number"/>
              <xsl:with-param name="row" select="$start_pos"/>
              <xsl:with-param name="merge_map" select="$merge_map"/>
            </xsl:call-template>
          </tr>
        </xsl:otherwise>
      </xsl:choose>

      <!-- Goto next -->
      <xsl:call-template name="generate_rows">
        <xsl:with-param name="default_row_height" select="$default_row_height"/>
        <xsl:with-param name="merge_map" select="$merge_map"/>
        <xsl:with-param name="rows_number" select="$rows_number"/>
        <xsl:with-param name="columns_number" select="$columns_number"/>
        <xsl:with-param name="start_pos" select="$start_pos + 1"/>
      </xsl:call-template>
    </xsl:if>

  </xsl:template>

  <xsl:template name="generate_cells">
    <!-- Req: current node is <row> -->
    <xsl:param name="columns_number"/>
    <xsl:param name="merge_map"/>

    <xsl:param name="start_pos">1</xsl:param>
    <xsl:param name="last_processed_column">0</xsl:param>

    <xsl:variable name="cell" select="main:c[position() = $start_pos]"/>
    
    <xsl:choose>
    	<xsl:when test="$cell">
        <xsl:variable name="column">
          <xsl:call-template name="ref2col">
          	<xsl:with-param name="ref" select="$cell/@r"/>
          </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="ref" select="$cell/@r"/>
        
        <!-- Generate skipped empty cells -->
        <xsl:call-template name="generate_empty_cells">
          <xsl:with-param name="col_start" select="$last_processed_column + 1"/>
          <xsl:with-param name="col_end" select="$column - 1"/>
          <xsl:with-param name="row" select="@r"/>
          <xsl:with-param name="merge_map" select="$merge_map"/>
        </xsl:call-template>

        <xsl:if test="not($merge_map/skipped[@ref = $ref])">
          <td xmlns="http://www.w3.org/TR/REC-html40">
            <xsl:variable name="merged" select="$merge_map/topleft[@ref = $ref]"/>
            <xsl:if test="$merged">
              <xsl:if test="$merged/@width > 1">
                <xsl:attribute name="colspan">
                  <xsl:value-of select="$merged/@width"/>
                </xsl:attribute>
              </xsl:if>
              <xsl:if test="$merged/@height > 1">
                <xsl:attribute name="rowspan">
                  <xsl:value-of select="$merged/@height"/>
                </xsl:attribute>
              </xsl:if>
            </xsl:if>
            <xsl:variable name="s">
              <xsl:choose>
            	  <xsl:when test="$cell/@s"><xsl:value-of select="$cell/@s"/></xsl:when>
            	  <xsl:otherwise>0</xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:attribute name="class">
              <xsl:text>style</xsl:text>
              <xsl:value-of select="$s"/>
            </xsl:attribute>
            <xsl:variable name="xf" select="$stylesheet_file/main:styleSheet/main:cellXfs/main:xf[position() = $s + 1]"/>
            <xsl:variable name="fontId" select="$xf/@fontId"/>
            <xsl:variable name="font" select="$stylesheet_file/main:styleSheet/main:fonts/main:font[position() = $fontId + 1]"/>
            <xsl:variable name="borderId" select="$xf/@borderId"/>
            <xsl:variable name="border" select="$stylesheet_file/main:styleSheet/main:borders/main:border[position() = $borderId + 1]"/>
            <xsl:variable name="horizontal">
              <xsl:choose>
            	  <xsl:when test="$xf/main:alignment and $xf/main:alignment/@horizontal"><xsl:value-of select="$xf/main:alignment/@horizontal"/></xsl:when>
            	  <xsl:otherwise>general</xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            
            <!-- Additional styles -->
            <xsl:variable name="style">
              <xsl:if test="$horizontal = 'general'">
                <xsl:variable name="type" select="$cell/@t"/>
                <xsl:choose>
                  <!-- Numeric values -->
                  <xsl:when test="not($type) or $type = 'n'">
                    <xsl:text>text-align:right; </xsl:text>
                  </xsl:when>
                  <!-- Boolean and Error values -->
                  <xsl:when test="$type = 'b' or $type = 'e'">
                    <xsl:text>text-align:center; </xsl:text>
                  </xsl:when>
                  <!-- String values -->
                  <xsl:otherwise/>
                </xsl:choose>
              </xsl:if>
              <xsl:if test="$merged">
                <xsl:variable name="br" select="$merged/@bottomright"/>
                <xsl:variable name="br_cell" select="../main:row/main:c[@r = $br]"/>
                <xsl:if test="$br_cell">
                  <xsl:variable name="br_s">
                    <xsl:choose>
            	        <xsl:when test="$br_cell/@s"><xsl:value-of select="$br_cell/@s"/></xsl:when>
            	        <xsl:otherwise>0</xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="br_xf" select="$stylesheet_file/main:styleSheet/main:cellXfs/main:xf[position() = $br_s + 1]"/>
                  <xsl:variable name="br_borderId" select="$br_xf/@borderId"/>
                  <xsl:variable name="br_border_bottom" select="$stylesheet_file/main:styleSheet/main:borders/main:border[position() = $br_borderId + 1]/main:bottom"/>
                  <xsl:variable name="br_border_right" select="$stylesheet_file/main:styleSheet/main:borders/main:border[position() = $br_borderId + 1]/main:right"/>
                  <xsl:if test="$br_border_bottom and $br_border_bottom/@style and $merged/@height > 1">
                    <xsl:apply-templates select="$br_border_bottom"/>
                  </xsl:if>
                  <xsl:if test="$br_border_right and $br_border_right/@style and $merged/@width > 1">
                    <xsl:apply-templates select="$br_border_right"/>
                  </xsl:if>
                </xsl:if>
              </xsl:if>
              <xsl:if test="$cell/@t = 's' or $cell/@t = 'str' or $cell/@t = 'inlineStr'">
                <xsl:text>overflow:hidden</xsl:text>
              </xsl:if>

            </xsl:variable>
            <xsl:if test="$style != ''">
              <xsl:attribute name="style"><xsl:value-of select="$style"/></xsl:attribute>
            </xsl:if>
            
            <!-- Styles set by tags -->
            <xsl:if test="$font/main:vertAlign/@val = 'superscript'">
              <xsl:text disable-output-escaping="yes">&lt;sup&gt;</xsl:text>
            </xsl:if>
            <xsl:if test="$font/main:vertAlign/@val = 'subscript'">
              <xsl:text disable-output-escaping="yes">&lt;sub&gt;</xsl:text>
            </xsl:if>
            <xsl:variable name="hyperlink_out">
              <xsl:call-template name="generate_hyperlink">
              	<xsl:with-param name="worksheet" select="../.."/>
              	<xsl:with-param name="ref" select="$ref"/>
              </xsl:call-template>
            </xsl:variable>
            
            <xsl:copy-of select="$hyperlink_out"/>
            
            <!-- Cell value -->
            <xsl:call-template name="DispValue">
              <xsl:with-param name="cell" select="$cell"/>
              <xsl:with-param name="xf" select="$xf"/>
            </xsl:call-template>

            <!-- Styles set by tags (ending tags) -->
            <xsl:if test="$hyperlink_out">
              <xsl:text disable-output-escaping="yes">&lt;/a&gt;</xsl:text>
            </xsl:if>
            <xsl:if test="$font/main:vertAlign/@val = 'subscript'">
              <xsl:text disable-output-escaping="yes">&lt;/sub&gt;</xsl:text>
            </xsl:if>
            <xsl:if test="$font/main:vertAlign/@val = 'superscript'">
              <xsl:text disable-output-escaping="yes">&lt;/sup&gt;</xsl:text>
            </xsl:if>
          </td>
        </xsl:if>
        
        <!-- Go to the next cell -->
        <xsl:call-template name="generate_cells">
        	<xsl:with-param name="columns_number" select="$columns_number"/>
        	<xsl:with-param name="merge_map" select="$merge_map"/>
        	<xsl:with-param name="start_pos" select="$start_pos + 1"/>
        	<xsl:with-param name="last_processed_column" select="$column"/>
        </xsl:call-template>
        
      </xsl:when>
    	<xsl:otherwise>
        <xsl:call-template name="generate_empty_cells">
          <xsl:with-param name="col_start" select="$last_processed_column + 1"/>
          <xsl:with-param name="col_end" select="$columns_number"/>
          <xsl:with-param name="row" select="@r"/>
          <xsl:with-param name="merge_map" select="$merge_map"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
    
  </xsl:template>

  <xsl:template name="generate_empty_cells">
    <xsl:param name="col_start"/>
    <xsl:param name="col_end"/>
    <xsl:param name="row"/>
    <xsl:param name="merge_map"/>
    <xsl:if test="$col_start &lt;= $col_end">
      <xsl:variable name="cur_ref">
        <xsl:call-template name="rowcol2ref">
          <xsl:with-param name="row" select="$row"/>
          <xsl:with-param name="col" select="$col_start"/>
        </xsl:call-template>
      </xsl:variable>
      <xsl:if test="not($merge_map/skipped[@ref = $cur_ref])">
        <td xmlns="http://www.w3.org/TR/REC-html40"/>
      </xsl:if>
      <xsl:call-template name="generate_empty_cells">
      	<xsl:with-param name="col_start" select="$col_start + 1"/>
        <xsl:with-param name="col_end" select="$col_end"/>
        <xsl:with-param name="row" select="$row"/>
      	<xsl:with-param name="merge_map" select="$merge_map"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>
    
  <xsl:template name="get_columns_number">
    <!-- Req: current node is <worksheet> -->
    <xsl:param name="start_pos">1</xsl:param>
    <xsl:param name="max_col">-1</xsl:param>

    <xsl:variable name="row" select="main:sheetData/main:row[position() = $start_pos]"/>
    <xsl:choose>
      <xsl:when test="$row">
        <xsl:variable name="col">
          <xsl:call-template name="ref2col">
            <xsl:with-param name="ref" select="$row/main:c[position() = last()]/@r"/>
          </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="new_max_col">
          <xsl:choose>
            <xsl:when test="$col > $max_col"><xsl:value-of select="$col"/></xsl:when>
            <xsl:otherwise><xsl:value-of select="$max_col"/></xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:call-template name="get_columns_number">
    	    <xsl:with-param name="start_pos" select="$start_pos + 1"/>
    	    <xsl:with-param name="max_col" select="$new_max_col"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <!-- Max column found -->
        <xsl:value-of select="$max_col"/> 
      </xsl:otherwise>
    </xsl:choose>
    	
  </xsl:template>
  
  <xsl:template name="generate_cols">
    <!-- Req: current node is <worksheet> -->
    <xsl:param name="columns_number"/>
    <xsl:param name="start_pos">1</xsl:param>
    <xsl:param name="last_processed_col">0</xsl:param>

    <xsl:variable name="col" select="main:cols/main:col[position() = $start_pos]"/>
    <xsl:choose>
    	<xsl:when test="$col">
        <xsl:if test="$col/@min - $last_processed_col > 1">
          <col width="{$default_column_width}" xmlns="http://www.w3.org/TR/REC-html40">
            <xsl:if test="$col/@min - $last_processed_col > 2">
              <xsl:attribute name="span"><xsl:value-of select="$col/@min - $last_processed_col - 1"/></xsl:attribute>
            </xsl:if>
          </col>
        </xsl:if>
        
        <col width="{round($col/@width * $MaximumDigitWidth)}"  xmlns="http://www.w3.org/TR/REC-html40">
          <xsl:if test="$col/@max > $col/@min">
            <xsl:attribute name="span"><xsl:value-of select="$col/@max - $col/@min + 1"/></xsl:attribute>
          </xsl:if>
        </col>
        
        <xsl:call-template name="generate_cols">
    	    <xsl:with-param name="columns_number" select="$columns_number"/>
    	    <xsl:with-param name="start_pos" select="$start_pos + 1"/>
    	    <xsl:with-param name="last_processed_col" select="$col/@max"/>
        </xsl:call-template>
      </xsl:when>
    	<xsl:otherwise>
        <xsl:if test="$columns_number > $last_processed_col">
          <col width="{$default_column_width}"  xmlns="http://www.w3.org/TR/REC-html40">
            <xsl:if test="$columns_number - $last_processed_col > 1">
              <xsl:attribute name="span">
                <xsl:value-of select="$columns_number - $last_processed_col"/>
              </xsl:attribute>
            </xsl:if>
          </col>
        </xsl:if>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="sum_columns_widths">
    <!-- Req: current node is <worksheet> -->
    <xsl:param name="columns_number"/>
    <xsl:param name="current_column_number">1</xsl:param>
    <xsl:param name="width">0</xsl:param>

    <xsl:choose>
    	<xsl:when test="$current_column_number &lt;= $columns_number">
        <xsl:variable name="col" select="main:cols/main:col[@min &lt;= $current_column_number and @max >= $current_column_number]"/>
        <xsl:variable name="col_width">
          <xsl:choose>
          	<xsl:when test="$col"><xsl:value-of select="round($col/@width * $MaximumDigitWidth)"/></xsl:when>
          	<xsl:otherwise><xsl:value-of select="$default_column_width"/></xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        
        <xsl:call-template name="sum_columns_widths">
    	    <xsl:with-param name="current_column_number" select="$current_column_number + 1"/>
    	    <xsl:with-param name="columns_number" select="$columns_number"/>
    	    <xsl:with-param name="width" select="$width + $col_width"/>
        </xsl:call-template>
      </xsl:when>
    	<xsl:otherwise><xsl:value-of select="$width"/></xsl:otherwise>
    </xsl:choose>
    
    
  </xsl:template>

  <xsl:template name="DispValue">
    <xsl:param name="cell"/>
    <xsl:param name="xf"/>
    <xsl:if test="$cell">
      <xsl:variable name="type" select="$cell/@t"/>
      <xsl:choose>
        <!-- Shared string values -->
      	<xsl:when test="$type = 's'">
          <xsl:call-template name="get_shared_string_formatted">
          	<xsl:with-param name="index" select="$cell/main:v"/>
          </xsl:call-template>
        </xsl:when>
        <!-- Boolean values -->
      	<xsl:when test="$type = 'b'">
          <xsl:choose>
          	<xsl:when test="$cell/main:v = 1 or translate($cell/main:v, 'true', 'TRUE') = 'TRUE'">TRUE</xsl:when>
          	<xsl:otherwise>FALSE</xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <!-- Numeric values -->
      	<xsl:when test="not($type) or $type = 'n'">
          <xsl:call-template name="apply_numeric_format">
          	<xsl:with-param name="number" select="$cell/main:v"/>
          	<xsl:with-param name="numFmtId" select="$xf/@numFmtId"/>
          </xsl:call-template>
        </xsl:when>
        <!-- String values -->
      	<xsl:otherwise>
          <xsl:value-of select="$cell/main:v"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>
  
  <xsl:template name="get_shared_string_formatted">
    <xsl:param name="index"/>
    <xsl:variable name="si" select="$shared_strings_file/main:sst/main:si[position() = $index + 1]"/>
    <xsl:choose>
      <!-- Not formatted specially -->
    	<xsl:when test="$si/main:t">
			<xsl:call-template name="break">
				<xsl:with-param name="text" select="$si/main:t/text()"/>
			</xsl:call-template>
      </xsl:when>
    	<xsl:otherwise>
        <xsl:for-each select="$si/main:r">
          <xsl:variable name="rPr" select="main:rPr"/>
          <xsl:choose>
          	<xsl:when test="$rPr">
              <xsl:variable name="font_index" select="count(preceding::main:r/main:rPr) + 1"/>
              <font class="font{$font_index}" xmlns="http://www.w3.org/TR/REC-html40"><!-- There must not be a whitespace here --><xsl:choose>
                	<xsl:when test="$rPr/main:vertAlign/@val = 'superscript'"><!-- There must not be a whitespace here --><sup><xsl:value-of select="main:t"/></sup><!-- There must not be a whitespace here --></xsl:when>
                	<xsl:when test="$rPr/main:vertAlign/@val = 'subscript'"><!-- There must not be a whitespace here --><sub><xsl:value-of select="main:t"/></sub><!-- There must not be a whitespace here --></xsl:when>
                	<xsl:otherwise>
					<xsl:call-template name="break">
						<xsl:with-param name="text" select="main:t/text()"/>
					</xsl:call-template>
                  </xsl:otherwise>
                </xsl:choose>
              </font><!-- There must not be a whitespace here --></xsl:when>
          	<xsl:otherwise>
				<xsl:call-template name="break">
					<xsl:with-param name="text" select="main:t/text()"/>
				</xsl:call-template>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:for-each>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

	<xsl:template name="break">
		<xsl:param name="text"/>		
		<xsl:choose>
			<xsl:when test="contains($text, '&#xa;')">
				<xsl:value-of select="substring-before($text, '&#xa;')"/>
				<xsl:text disable-output-escaping="yes">&lt;br/&gt;</xsl:text>
				<xsl:call-template name="break">
					<xsl:with-param name="text" select="substring-after($text, '&#xa;')"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$text"/>				
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>



	<xsl:template name="generate_java_script">
  <script language="JavaScript">
    <xsl:comment>
      function OnLoad()
      {
        var rows = document.getElementsByTagName("table")[0].getElementsByTagName("tr");
        for(var row_num = 0; row_num &lt; 2/*rows.length*/; ++row_num)
        {
          var row = rows[row_num];
          //var row_num = row.GetAttribute("r");
          var cells = row.getElementsByTagName("td");
          for(var col_num = 0; col_num &lt; cells.length; ++col_num)
          {
            var cell = cells[col_num];
            var id = cell.getAttribute("id");
            if(id != null)
            {
              if(id.indexOf("text") != -1)
              {
                //alert(id);
              }
            }
          }
        }
      }

    </xsl:comment>
  </script>

  </xsl:template>

  <xsl:template name="generate_merge_map">
    <xsl:param name="mergeCells"/>
    <xsl:if test="$mergeCells">
      <xsl:for-each select="$mergeCells/main:mergeCell">
        <xsl:variable name="topleft" select="substring-before(@ref, ':')"/>
        <xsl:variable name="bottomright" select="substring-after(@ref, ':')"/>
        <xsl:if test="string-length($topleft) != 0 and string-length($bottomright) != 0">
          <xsl:variable name="col1">
            <xsl:call-template name="ref2col">
              <xsl:with-param name="ref" select="$topleft"/>
            </xsl:call-template>
          </xsl:variable>
          <xsl:variable name="col2">
            <xsl:call-template name="ref2col">
              <xsl:with-param name="ref" select="$bottomright"/>
            </xsl:call-template>
          </xsl:variable>
          <xsl:variable name="row1">
            <xsl:call-template name="ref2row">
              <xsl:with-param name="ref" select="$topleft"/>
            </xsl:call-template>
          </xsl:variable>
          <xsl:variable name="row2">
            <xsl:call-template name="ref2row">
              <xsl:with-param name="ref" select="$bottomright"/>
            </xsl:call-template>
          </xsl:variable>
          <topleft ref="{$topleft}" width="{$col2 - $col1 + 1}" height="{$row2 - $row1 + 1}" bottomright="{$bottomright}" />
          <xsl:call-template name="generate_skipped_cells">
            <xsl:with-param name="col1" select="$col1"/>
            <xsl:with-param name="col2" select="$col2"/>
            <xsl:with-param name="row1" select="$row1"/>
            <xsl:with-param name="row2" select="$row2"/>
            <xsl:with-param name="cur_col" select="$col1 + 1"/>
            <xsl:with-param name="cur_row" select="$row1"/>
          </xsl:call-template>
        </xsl:if>
      </xsl:for-each>
    </xsl:if>
  </xsl:template>

  <xsl:template name="generate_skipped_cells">
    <xsl:param name="col1"/>
    <xsl:param name="col2"/>
    <xsl:param name="row1"/>
    <xsl:param name="row2"/>
    <xsl:param name="cur_col"/>
    <xsl:param name="cur_row"/>

    <xsl:if test="$cur_row &lt;= $row2">
      <xsl:choose>
        <xsl:when test="$cur_col &lt;= $col2">
          <xsl:variable name="cur_ref">
            <xsl:call-template name="rowcol2ref">
            	<xsl:with-param name="row" select="$cur_row"/>
            	<xsl:with-param name="col" select="$cur_col"/>
            </xsl:call-template>
          </xsl:variable>
          <skipped ref="{$cur_ref}" />
          <xsl:call-template name="generate_skipped_cells">
            <xsl:with-param name="col1" select="$col1"/>
            <xsl:with-param name="col2" select="$col2"/>
            <xsl:with-param name="row1" select="$row1"/>
            <xsl:with-param name="row2" select="$row2"/>
            <xsl:with-param name="cur_col" select="$cur_col + 1"/>
            <xsl:with-param name="cur_row" select="$cur_row"/>
          </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="generate_skipped_cells">
            <xsl:with-param name="col1" select="$col1"/>
            <xsl:with-param name="col2" select="$col2"/>
            <xsl:with-param name="row1" select="$row1"/>
            <xsl:with-param name="row2" select="$row2"/>
            <xsl:with-param name="cur_col" select="$col1"/>
            <xsl:with-param name="cur_row" select="$cur_row + 1"/>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>

  </xsl:template>

  <xsl:template name="apply_numeric_format">
    <xsl:param name="number"/>
    <xsl:param name="numFmtId"/>
    <xsl:variable name="format_string">
      <xsl:call-template name="get_numeric_format_string">
      	<xsl:with-param name="numFmtId" select="$numFmtId"/>
      </xsl:call-template>
    </xsl:variable>
    
    
    <xsl:value-of select="$number"/>
  </xsl:template>
  
  <xsl:template name="get_numeric_format_string">
    <xsl:param name="numFmtId"/>
    <xsl:variable name="numFmt" select="$stylesheet_file/main:styleSheet/main:numFmts/main:numFmt[@numFmtId = $numFmtId]"/>
    <xsl:variable name="standard_numFmt" select="msxsl:node-set($standardNumericFormats)/numFmts/numFmt[@numFmtId = $numFmtId]"/>
    <xsl:choose>
    	<xsl:when test="$numFmt">
        <xsl:value-of select="$numFmt/@formatCode"/>
      </xsl:when>
      <xsl:when test="$standard_numFmt">
        <xsl:value-of select="$standard_numFmt/@formatCode"/>
      </xsl:when>
    	<xsl:otherwise>
        <xsl:text>General</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  
  
  </xsl:template>

  <xsl:variable name="referred_cells_raw">
    <xsl:for-each select="$worksheets_files/main:worksheet">
      <xsl:variable name="ws_pos" select="position()"/>
      <xsl:for-each select="main:hyperlinks/main:hyperlink/@location">
        <xsl:variable name="last_excl">
          <xsl:call-template name="find_last">
            <xsl:with-param name="str" select="."/>
            <xsl:with-param name="searched_str">!</xsl:with-param>
          </xsl:call-template>
        </xsl:variable> 
        <xsl:variable name="location_sheet">
          <xsl:call-template name="unescape_sheet_name">
            <xsl:with-param name="ws_name" select="substring(., 1, $last_excl - 1)"/>
          </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="ref" select="substring(., $last_excl + 1)"/>
        <xsl:variable name="top_left">
          <xsl:call-template name="ref2topleft">
            <xsl:with-param name="ref" select="$ref"/>
          </xsl:call-template>
        </xsl:variable>
        <ref_cell sheet="{$location_sheet}" ref="{$top_left}"/>
      </xsl:for-each>
    </xsl:for-each>
  </xsl:variable>

  <xsl:variable name="referred_cells" select="msxsl:node-set($referred_cells_raw)"/>


  <xsl:template name="generate_hyperlink">
    <xsl:param name="worksheet"/>
    <xsl:param name="ref"/>
    <xsl:variable name="hyperlink" select="$worksheet/main:hyperlinks/main:hyperlink[@ref = $ref]"/>
    <xsl:variable name="ws_pos" select="count($worksheet/preceding-sibling::main:worksheet) + 1"/>
    <xsl:variable name="ws_name" select="$worksheets_info/sheet[position() = $ws_pos]/@name"/>
    <xsl:variable name="ws_file_name" select="$worksheets_info/sheet[position() = $ws_pos]/@file_name"/>
    <xsl:variable name="ref_cell">
      <xsl:value-of select="$referred_cells/ref_cell[@ref = $ref and @sheet = $ws_name]"/>
    </xsl:variable>
    <xsl:if test="$hyperlink or $ref_cell">
      <xsl:text disable-output-escaping="yes">&lt;a </xsl:text>
        <xsl:if test="$hyperlink">
          <xsl:variable name="rId" select="$hyperlink/@mainr:id"/>
          <xsl:variable name="href" select="$worksheet/following-sibling::*[position() = 1]/self::r:Relationships/r:Relationship[@Id = $rId]/@Target"/>
          <xsl:choose>
          	<xsl:when test="$href">
              <xsl:text>href="</xsl:text>
                <xsl:value-of select="$href"/>
              <xsl:text>" </xsl:text>
                <xsl:text>target="_parent" </xsl:text>
            </xsl:when>
            <xsl:when test="$hyperlink/@location">
              <xsl:variable name="last_excl">
                <xsl:call-template name="find_last">
                  <xsl:with-param name="str" select="$hyperlink/@location"/>
                  <xsl:with-param name="searched_str">!</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>
              <xsl:variable name="location_sheet_name">
                <xsl:call-template name="unescape_sheet_name">
                  <xsl:with-param name="ws_name" select="substring($hyperlink/@location, 1, $last_excl - 1)"/>
                </xsl:call-template>
              </xsl:variable>
              <xsl:variable name="top_left">
                <xsl:call-template name="ref2topleft">
                	<xsl:with-param name="ref" select="substring($hyperlink/@location, $last_excl + 1)"/>
                </xsl:call-template>
              </xsl:variable>
<!--               <xsl:text>debug="</xsl:text><xsl:value-of select="$top_left"/><xsl:text>" </xsl:text> -->
              <xsl:variable name="sheet_file_name" select="$worksheets_info/sheet[@name = $location_sheet_name]/@file_name"/>
              <xsl:if test="$top_left and $sheet_file_name">
                <xsl:text>href="</xsl:text>
                <xsl:if test="$single_file != 'true'">
                  <xsl:value-of select="$sheet_file_name"/>
                </xsl:if>
                <xsl:text>#ref_</xsl:text>
                <xsl:if test="$single_file = 'true'">
                  <xsl:value-of select="substring-before($sheet_file_name, '.')"/>
                  <xsl:text>_</xsl:text>
                </xsl:if>
                <xsl:value-of select="$top_left"/>
                <xsl:text>" </xsl:text>
              </xsl:if>
            </xsl:when>
          </xsl:choose>
        </xsl:if>
        <xsl:if test="$ref_cell">
          <xsl:text>name="</xsl:text>
          <xsl:text>ref_</xsl:text>
          <xsl:if test="$single_file = 'true'">
            <xsl:value-of select="substring-before($ws_file_name, '.')"/>
            <xsl:text>_</xsl:text>
          </xsl:if>
          <xsl:value-of select="$ref"/>
          <xsl:text>" </xsl:text>
        </xsl:if>
      <xsl:text disable-output-escaping="yes">&gt;</xsl:text>
    </xsl:if>
  </xsl:template>

</xsl:stylesheet>