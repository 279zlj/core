<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:r="http://schemas.openxmlformats.org/package/2006/relationships"
                xmlns:mainr="http://schemas.openxmlformats.org/officeDocument/2006/relationships"
                xmlns:main="http://schemas.openxmlformats.org/spreadsheetml/2006/main"
                xmlns:msxsl="urn:schemas-microsoft-com:xslt"
                xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"
                extension-element-prefixes="msxsl">

  <xsl:template name="css_file">
    <file name="stylesheet.css" format="text">
      <formatted_text>
        <xsl:call-template name="css_content"/>
      </formatted_text>
    </file>
  </xsl:template>

  <xsl:template name="css_content">
    <xsl:text>
tr
  {mso-height-source:auto;}
col
	{mso-width-source:auto;}
br
	{mso-data-placement:same-cell;}
td
	{mso-style-parent:style0;
	padding-top:1px;
	padding-right:1px;
	padding-left:1px;
	mso-ignore:padding;
	color:black;
	font-size:11.0pt;
	font-weight:400;
	font-style:normal;
	text-decoration:none;
	font-family:Arial, sans-serif;
	mso-font-charset:204;
	mso-number-format:General;
	text-align:general;
	vertical-align:bottom;
	border:none;
	mso-background-source:auto;
	mso-pattern:auto;
	mso-protection:locked visible;
	white-space:nowrap;
	mso-rotate:0;}
    </xsl:text>
    <xsl:for-each select="$shared_strings_file/main:sst/main:si/main:r/main:rPr">
      <xsl:call-template name="font"/>
    </xsl:for-each>
    <xsl:for-each select="$stylesheet_file/main:styleSheet/main:cellXfs/main:xf">
      <xsl:call-template name="style"/>
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="font">
    <xsl:text>
.font</xsl:text>
    <xsl:value-of select="position()"/>
    <xsl:text>
&#09;{</xsl:text>
    <xsl:apply-templates select="."/>
    <xsl:text>}</xsl:text>
  </xsl:template>

  <xsl:template match="main:rPr | main:font">
    <xsl:for-each select="main:name | main:rFont">
      <xsl:text>font-family:</xsl:text>
      <xsl:value-of select="@val"/>
      <xsl:text>; </xsl:text>
    </xsl:for-each>
    <xsl:if test="main:sz">
      <xsl:text>font-size:</xsl:text>
      <xsl:value-of select="main:sz/@val"/>
      <xsl:text>pt; </xsl:text>
    </xsl:if>
    <xsl:if test="main:b">
      <xsl:text>font-weight:</xsl:text>
      <xsl:choose>
        <xsl:when test="not(boolean(main:b/@val)) or translate(main:b/@val, 'TRUE', 'true') = 'true' or main:b/@val = '1'">bold; </xsl:when>
        <xsl:otherwise>normal; </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
    <xsl:if test="main:i">
      <xsl:text>font-style:</xsl:text>
      <xsl:choose>
        <xsl:when test="not(boolean(main:i/@val)) or translate(main:i/@val, 'TRUE', 'true') = 'true' or main:i/@val = '1'">italic; </xsl:when>
        <xsl:otherwise> normal; </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
    <xsl:if test="main:strike or main:u">
      <xsl:text>text-decoration:</xsl:text>
      <xsl:if test="main:strike and not(boolean(main:strike/@val)) or translate(main:strike/@val, 'TRUE', 'true') = 'true' or main:strike/@val = '1'">line-through</xsl:if>
      <xsl:if test="main:strike and main:u"><xsl:text> </xsl:text></xsl:if>
      <xsl:if test="main:u">underline</xsl:if>
      <xsl:text>; </xsl:text>
    </xsl:if>

    <xsl:if test="main:color">
      <xsl:text>color:</xsl:text>
      <xsl:call-template name="color2css">
        <xsl:with-param name="color" select="main:color"/>
      </xsl:call-template>
      <xsl:text>; </xsl:text>
    </xsl:if>
  </xsl:template>

  <xsl:template name="color2css"> <!-- Transforms <color> tag to the corresponding CSS color value -->
    <xsl:param name="color"/>
    <xsl:choose>
      <xsl:when test="$color/@indexed">
        <xsl:choose>
        	<xsl:when test="$color/@indexed &lt; 64">
            <xsl:variable name="storedIndexedColors" select="$stylesheet_file/main:styleSheet/main:colors/main:indexedColors"/>
            <xsl:choose>
              <xsl:when test="storedIndexedColors">
                <xsl:call-template name="applyTintToRGB_CSS">
                  <xsl:with-param name="rgb" select="$storedIndexedColors/main:rgbColor[position() = $color/@indexed + 1]/@rgb"/>
                  <xsl:with-param name="tint" select="$color/@tint"/>
                </xsl:call-template>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="applyTintToRGB_CSS">
                  <xsl:with-param name="rgb" select="msxsl:node-set($standardIndexedColors)/main:indexedColors/main:rgbColor[position() = $color/@indexed + 1]/@rgb"/>
                  <xsl:with-param name="tint" select="$color/@tint"/>
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$color/@indexed = 64">
            <xsl:text>black</xsl:text>
          </xsl:when>
          <xsl:when test="$color/@indexed = 65">
            <xsl:text>white</xsl:text>
          </xsl:when>
          <xsl:otherwise>black</xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:when test="$color/@rgb">
        <xsl:call-template name="applyTintToRGB_CSS">
        	<xsl:with-param name="rgb" select="$color/@rgb"/>
        	<xsl:with-param name="tint" select="$color/@tint"/>
        </xsl:call-template>
      </xsl:when>
      <!-- Auto color is skipped and shall be set in the context of an invocation due to different auto value
      <xsl:when test="$color/@auto = 'true' or $color/@auto = '1'">
        <xsl:value-of select="'64'"/>
      </xsl:when>
      -->
      <xsl:when test="$color/@theme">
        <xsl:variable name="color_pos">
          <xsl:choose>
            <xsl:when test="$color/@theme = 0">1</xsl:when>
            <xsl:when test="$color/@theme = 1">0</xsl:when>
            <xsl:when test="$color/@theme = 2">3</xsl:when>
            <xsl:when test="$color/@theme = 3">2</xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$color/@theme"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="color_item" select="$theme_file/a:theme/a:themeElements/a:clrScheme/*[position() = $color_pos + 1]"/>
        <xsl:if test="$color_item">
          <xsl:variable name="rgb" select="$color_item/a:srgbClr/@val"/>
          <xsl:variable name="sys_color" select="$color_item/a:sysClr"/>
          <xsl:choose>
            <xsl:when test="$rgb != ''">
              <xsl:call-template name="applyTintToRGB_CSS">
                <xsl:with-param name="rgb" select="$rgb"/>
                <xsl:with-param name="tint" select="$color/@tint"/>
              </xsl:call-template>
            </xsl:when>
            <xsl:when test="$sys_color and $sys_color/@lastClr">
              <xsl:call-template name="applyTintToRGB_CSS">
                <xsl:with-param name="rgb" select="$sys_color/@lastClr"/>
                <xsl:with-param name="tint" select="$color/@tint"/>
              </xsl:call-template>
            </xsl:when>
            <xsl:when test="$sys_color and not($sys_color/@lastClr)">
              <!-- No idea -->
              <xsl:text>black</xsl:text>
            </xsl:when>
          </xsl:choose>

        </xsl:if>

      </xsl:when>
    </xsl:choose>
  </xsl:template>


  <xsl:template name="applyTintToRGB_CSS">
    <xsl:param name="rgb"/>
    <!-- Pass only 8 or 6 hexadecimal digits here -->
    <xsl:param name="tint"/>
    <xsl:variable name="rgb6">
      <xsl:choose>
        <xsl:when test="string-length($rgb) = 8">
          <xsl:value-of select="substring($rgb, 3)"/>
        </xsl:when>
        <xsl:otherwise><xsl:value-of select="$rgb"/></xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="r">
      <xsl:call-template name="hex2dec">
        <xsl:with-param name="hex" select="substring($rgb6, 1, 2)"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="g">
      <xsl:call-template name="hex2dec">
        <xsl:with-param name="hex" select="substring($rgb6, 3, 2)"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="b">
      <xsl:call-template name="hex2dec">
        <xsl:with-param name="hex" select="substring($rgb6, 5, 2)"/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:choose>
      
      <xsl:when test="$tint and $tint != 0">
        <xsl:variable name="max">
          <xsl:choose>
            <xsl:when test="$r > $g and $r > $b">
              <xsl:value-of select="$r"/>
            </xsl:when>
            <xsl:when test="$g >= $r and $g > $b">
              <xsl:value-of select="$g"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$b"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="min">
          <xsl:choose>
            <xsl:when test="$r &lt; $g and $r &lt; $b">
              <xsl:value-of select="$r"/>
            </xsl:when>
            <xsl:when test="$g &lt;= $r and $g &lt; $b">
              <xsl:value-of select="$g"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$b"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>

        <xsl:variable name="h">
          <xsl:choose>
            <xsl:when test="$max = $min">0</xsl:when>
            <!-- Undefined -->
            <xsl:when test="$max = $r and $g >= $b">
              <xsl:value-of select="($g - $b) div (6 * ($max - $min))"/>
            </xsl:when>
            <xsl:when test="$max = $r and $g &lt; $b">
              <xsl:value-of select="($g - $b) div (6 * ($max - $min)) + 1"/>
            </xsl:when>
            <xsl:when test="$max = $g">
              <xsl:value-of select="($b - $r) div (6 * ($max - $min)) + 1 div 3"/>
            </xsl:when>
            <xsl:when test="$max = $b">
              <xsl:value-of select="($r - $g) div (6 * ($max - $min)) + 2 div 3"/>
            </xsl:when>
          </xsl:choose>
        </xsl:variable>

        <xsl:variable name="l" select="($max + $min) div 2 div 255"/>

        <xsl:variable name="s">
          <xsl:choose>
            <xsl:when test="$l = 0">0</xsl:when>
            <xsl:when test="$l > 0 and $l &lt;= 0.5">
              <xsl:value-of select="($max - $min) div ($max + $min)"/>
            </xsl:when>
            <xsl:when test="$l > 0.5 and $l &lt; 1">
              <xsl:value-of select="($max - $min) div (2 * 255 - ($max + $min))"/>
            </xsl:when>
            <xsl:when test="$l = 1">0</xsl:when>
          </xsl:choose>
        </xsl:variable>
<!--         <message>RGB(<xsl:value-of select="$r"/>, <xsl:value-of select="$g"/>, <xsl:value-of select="$b"/>) = HSL(<xsl:value-of select="round($h * 240)"/>, <xsl:value-of select="round($s * 240)"/>, <xsl:value-of select="round($l * 240)"/>) tint=<xsl:value-of select="$tint"/></message> -->
        <xsl:variable name="l_corrected">
          <xsl:choose>
            <xsl:when test="$tint &lt; 0">
              <xsl:value-of select="$l * (1 + $tint)"/>
            </xsl:when>
            <xsl:when test="$tint > 0">
              <xsl:value-of select="$l * (1 - $tint) + $tint"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$l"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>

        <xsl:variable name="q">
          <xsl:choose>
            <xsl:when test="$l_corrected &lt; 0.5">
              <xsl:value-of select="$l_corrected * (1 + $s)"/>
            </xsl:when>
            <xsl:when test="$l_corrected >= 0.5">
              <xsl:value-of select="$l_corrected + $s - ($l_corrected * $s)"/>
            </xsl:when>
          </xsl:choose>
        </xsl:variable>

        <xsl:variable name="p" select="2 * $l_corrected - $q"/>
        <xsl:variable name="Tr" select="$h + 1 div 3"/>
        <xsl:variable name="Tg" select="$h"/>
        <xsl:variable name="Tb" select="$h - 1 div 3"/>

        <xsl:variable name="Tr01">
          <xsl:choose>
            <xsl:when test="$Tr &lt; 0">
              <xsl:value-of select="$Tr + 1"/>
            </xsl:when>
            <xsl:when test="$Tr > 1">
              <xsl:value-of select="$Tr - 1"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$Tr"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="Tg01">
          <xsl:choose>
            <xsl:when test="$Tg &lt; 0">
              <xsl:value-of select="$Tg + 1"/>
            </xsl:when>
            <xsl:when test="$Tg > 1">
              <xsl:value-of select="$Tg - 1"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$Tg"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="Tb01">
          <xsl:choose>
            <xsl:when test="$Tb &lt; 0">
              <xsl:value-of select="$Tb + 1"/>
            </xsl:when>
            <xsl:when test="$Tb > 1">
              <xsl:value-of select="$Tb - 1"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$Tb"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>

        <xsl:variable name="r_out">
          <xsl:choose>
            <xsl:when test="$Tr01 &lt; 1 div 6">
              <xsl:value-of select="($p + ($q - $p) * 6 * $Tr01) * 255"/>
            </xsl:when>
            <xsl:when test="$Tr01 >= 1 div 6 and $Tr01 &lt; 1 div 2">
              <xsl:value-of select="$q * 255"/>
            </xsl:when>
            <xsl:when test="$Tr01 >= 1 div 2 and $Tr01 &lt; 2 div 3">
              <xsl:value-of select="($p + ($q - $p) * 6 * (2 div 3 - $Tr01)) * 255"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$p * 255"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="g_out">
          <xsl:choose>
            <xsl:when test="$Tg01 &lt; 1 div 6">
              <xsl:value-of select="($p + ($q - $p) * 6 * $Tg01) * 255"/>
            </xsl:when>
            <xsl:when test="$Tg01 >= 1 div 6 and $Tg01 &lt; 1 div 2">
              <xsl:value-of select="$q * 255"/>
            </xsl:when>
            <xsl:when test="$Tg01 >= 1 div 2 and $Tg01 &lt; 2 div 3">
              <xsl:value-of select="($p + ($q - $p) * 6 * (2 div 3 - $Tg01)) * 255"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$p * 255"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="b_out">
          <xsl:choose>
            <xsl:when test="$Tb01 &lt; 1 div 6">
              <xsl:value-of select="($p + ($q - $p) * 6 * $Tb01) * 255"/>
            </xsl:when>
            <xsl:when test="$Tb01 >= 1 div 6 and $Tb01 &lt; 1 div 2">
              <xsl:value-of select="$q * 255"/>
            </xsl:when>
            <xsl:when test="$Tb01 >= 1 div 2 and $Tb01 &lt; 2 div 3">
              <xsl:value-of select="($p + ($q - $p) * 6 * (2 div 3 - $Tb01)) * 255"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$p * 255"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        
        <xsl:text>rgb(</xsl:text>
        <xsl:value-of select="round($r_out)"/>
        <xsl:text>,</xsl:text>
        <xsl:value-of select="round($g_out)"/>
        <xsl:text>,</xsl:text>
        <xsl:value-of select="round($b_out)"/>
        <xsl:text>)</xsl:text>
<!--         <message>HSL(<xsl:value-of select="round($h * 240)"/>, <xsl:value-of select="round($s * 240)"/>, <xsl:value-of select="round($l_corrected * 240)"/>) = RGB(<xsl:value-of select="round($r_out)"/>, <xsl:value-of select="round($g_out)"/>, <xsl:value-of select="round($b_out)"/>)</message> -->
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>#</xsl:text>
        <xsl:value-of select="$rgb6"/>
      </xsl:otherwise>      
    </xsl:choose>

  </xsl:template>

  <xsl:variable name="hex_digits">0123456789ABCDEF</xsl:variable>

  <xsl:template name="hex2dec">
    <xsl:param name="hex"/>
    <xsl:param name="dec">0</xsl:param>
    <xsl:choose>
      <xsl:when test="$hex != ''">
        <xsl:call-template name="hex2dec">
          <xsl:with-param name="hex" select="substring($hex, 2, string-length($hex) - 1)"/>
          <xsl:with-param name="dec" select="(number($dec) * 16) + string-length(substring-before($hex_digits, substring($hex, 1, 1)))"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$dec"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- Unverified -->
  <xsl:template name="dec2hex">
    <xsl:param name="dec"/>
    <xsl:param name="min_length">2</xsl:param>
    <xsl:param name="result"/>
    <xsl:choose>
    	<xsl:when test="$dec > 0 or $min_length > 0">
        <xsl:variable name="digit" select="substring($hex_digits, $dec mod 16, 1)"/>
        <xsl:call-template name="dec2hex">
          <xsl:with-param name="dec" select="$dec div 16"/>
          <xsl:with-param name="min_length" select="$min_length - 1"/>
          <xsl:with-param name="result" select="concat($digit, $result)"/>
        </xsl:call-template>
      </xsl:when>
    	<xsl:otherwise>
        <xsl:value-of select="$result"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="style">
    <xsl:text>
.style</xsl:text>
    <xsl:value-of select="position() - 1"/>
    <xsl:text>&#09;{mso-style-parent:style0; </xsl:text>
    <xsl:variable name="fontId" select="@fontId"/>
    <xsl:variable name="font" select="$stylesheet_file/main:styleSheet/main:fonts/main:font[position() = $fontId + 1]"/>
    <xsl:apply-templates select="$font"/>
    
    <xsl:variable name="borderId" select="@borderId"/>
    <xsl:apply-templates select="$stylesheet_file/main:styleSheet/main:borders/main:border[position() = $borderId + 1]"/>
    
    <xsl:variable name="fillId" select="@fillId"/>
    <xsl:apply-templates select="$stylesheet_file/main:styleSheet/main:fills/main:fill[position() = $fillId + 1]"/>

    <xsl:apply-templates select="main:alignment"/>
    
    <xsl:text>}</xsl:text>

  </xsl:template>

  <xsl:template match="main:border">
    <xsl:apply-templates select="main:left | main:right | main:top | main:bottom"/>    
  </xsl:template>

  <xsl:template match="main:border/main:left | main:border/main:right | main:border/main:top | main:border/main:bottom">
    <xsl:text>border-</xsl:text>
    <xsl:value-of select="name()"/>
    <xsl:text>:</xsl:text>
    <xsl:choose>
      <xsl:when test="@style = 'dashDot'">1pt dashed </xsl:when>
      <xsl:when test="@style = 'dashDotDot'">1pt dotted </xsl:when>
      <xsl:when test="@style = 'dashed'">1pt dashed </xsl:when>
      <xsl:when test="@style = 'dotted'">1pt dotted </xsl:when>
      <xsl:when test="@style = 'double'">1pt double </xsl:when>
      <xsl:when test="@style = 'hair'">1pt dotted </xsl:when>
      <xsl:when test="@style = 'medium'">1.5pt solid </xsl:when>
      <xsl:when test="@style = 'mediumDashDot'">1.5pt dashed </xsl:when>
      <xsl:when test="@style = 'mediumDashDotDot'">1.5pt dotted </xsl:when>
      <xsl:when test="@style = 'mediumDashed'">1.5pt dashed </xsl:when>
      <xsl:when test="@style = 'none'">1pt none </xsl:when>
      <xsl:when test="@style = 'slantDashDot'">1.5pt dashed </xsl:when>
      <xsl:when test="@style = 'thick'">2.0pt solid </xsl:when>
      <xsl:when test="@style = 'thin'">1pt solid </xsl:when>
      <xsl:when test="not(@style)">1pt none </xsl:when>
    </xsl:choose>
    <xsl:choose>
    	<xsl:when test="main:color">
        <xsl:call-template name="color2css">
          <xsl:with-param name="color" select="main:color"/>
        </xsl:call-template>
      </xsl:when>
    	<xsl:otherwise>black</xsl:otherwise>
    </xsl:choose>
    
    <xsl:text>; </xsl:text>
  </xsl:template>

  <xsl:template match="main:fill">
    <xsl:choose>
    	<xsl:when test="main:patternFill and main:patternFill/@patternType = 'solid'">
        <xsl:text>background-color:</xsl:text>
        <xsl:call-template name="color2css">
          <xsl:with-param name="color" select="main:patternFill/main:fgColor"/>
        </xsl:call-template>
        <xsl:text>; </xsl:text>
      </xsl:when>
    	<xsl:when test="main:gradientFill and main:gradientFill/main:stop">
        <xsl:text>background-color:</xsl:text>
        <xsl:call-template name="color2css">
          <xsl:with-param name="color" select="main:gradientFill/main:stop[position() = 1]/main:color"/>
        </xsl:call-template>
        <xsl:text>; </xsl:text>
      </xsl:when>
    </xsl:choose>
    
    
    
  </xsl:template>

  <xsl:template match="main:alignment">
    <xsl:variable name="horizontal" select="@horizontal"/>
    <xsl:if test="$horizontal and $horizontal != 'general'">
      <xsl:text>text-align:</xsl:text>
      <xsl:choose>
      	<xsl:when test="$horizontal = 'left'">left</xsl:when>
        <xsl:when test="$horizontal = 'right'">right</xsl:when>
        <xsl:when test="$horizontal = 'center'">center</xsl:when>
        <xsl:when test="$horizontal = 'fill'">justify</xsl:when>
        <xsl:when test="$horizontal = 'justify'">justify</xsl:when>
        <xsl:when test="$horizontal = 'centerContinuous'">center</xsl:when>
        <xsl:when test="$horizontal = 'distributed'">justify</xsl:when>
      </xsl:choose>
      <xsl:text>; </xsl:text>
    </xsl:if>
    <xsl:variable name="vertical" select="@vertical"/>
    <xsl:if test="$vertical">
      <xsl:text>vertical-align:</xsl:text>
      <xsl:choose>
      	<xsl:when test="$vertical = 'top'">top</xsl:when>
        <xsl:when test="$vertical = 'center'">middle</xsl:when>
        <xsl:when test="$vertical = 'bottom'">bottom</xsl:when>
        <xsl:when test="$vertical = 'justify'">justify</xsl:when>
        <xsl:when test="$vertical = 'distributed'">justify</xsl:when>
      </xsl:choose>
      <xsl:text>; </xsl:text>
    </xsl:if>
    <xsl:variable name="wrapText" select="translate(@wrapText, 'TRUEFALSE', 'truefalse')"/>
    <xsl:if test="$wrapText = 'true' or $wrapText = '1'">
      <xsl:text>white-space:normal; </xsl:text>
    </xsl:if>
    <xsl:variable name="indent" select="@indent"/>
    <xsl:if test="$indent">
  	  <xsl:if test="$horizontal = 'left' or $horizontal = 'distributed'">
        <xsl:text>padding-left:</xsl:text>
        <xsl:value-of select="$indent * 1.5"/>
        <xsl:text>ex; </xsl:text>
      </xsl:if>
  	  <xsl:if test="$horizontal = 'right' or $horizontal = 'distributed'">
        <xsl:text>padding-right:</xsl:text>
        <xsl:value-of select="$indent * 1.5"/>
        <xsl:text>ex; </xsl:text>
      </xsl:if>
    </xsl:if>
    <xsl:if test="$wrapText = 'true' or $wrapText = '1'">
      <xsl:text>white-space:normal; </xsl:text>
    </xsl:if>
  </xsl:template>
  
</xsl:stylesheet>